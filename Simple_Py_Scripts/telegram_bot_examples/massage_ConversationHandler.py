#!/usr/bin/env python3
# -*- coding: utf-8 -*-

__author__ = 'ipetrash'


# SOURCE: https://ru.stackoverflow.com/q/1174642/201445
# SOURCE: https://ru.stackoverflow.com/q/1175226/201445


import sys

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
)
from telegram.ext import (
    Updater, MessageHandler, CommandHandler, Filters, CallbackContext, CallbackQueryHandler,
    ConversationHandler, Defaults
)

from config import TOKEN
from common import get_logger, log_func

sys.path.append('calendar_example')
import telegramcalendar


log = get_logger(__file__)


# TODO: enum
STATE_SELECT_MASSAGE = 'STATE_SELECT_MASSAGE'
STATE_SELECT_DATE = 'STATE_SELECT_DATE'
STATE_SELECT_TIME = 'STATE_SELECT_TIME'
STATE_SELECT_USER = 'STATE_SELECT_USER'
STATE_SELECT_PHONE = 'STATE_SELECT_PHONE'
STATE_FINISH = 'STATE_FINISH'


def facts_to_str(user_data: dict) -> str:
    facts = []
    for key, value in user_data.items():
        facts.append('{} - {}'.format(key, value))
    return "\n".join(facts).join(['\n', '\n'])


@log_func(log)
def on_main_menu(update: Update, context: CallbackContext):
    # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ –∏–∑ CallbackQueryHandler
    query = update.callback_query
    if query:
        query.answer()

    message = update.effective_message
    user_id = update.effective_user.id
    print('User ID: {} '.format(user_id))

    keyboard = [
        [
            InlineKeyboardButton("–û –º–∞—Å—Ç–µ—Ä–µ üßëüèª", callback_data='master'),
            InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã ‚òéÔ∏è", callback_data='contacts'),
            InlineKeyboardButton("–í–∏–¥—ã –º–∞—Å—Å–∞–∂–∞", callback_data='types_massage')
        ],
        [
            InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è‚Äç", callback_data='sing_up'),
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data='cancel')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = '''–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! 
–Ø –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –í–∞—à–µ–≥–æ –º–∞—Å—Ç–µ—Ä–∞.
C –º–æ–µ–π –ø–æ–º–æ—â—å—é –í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ –≤–∏–¥–∞—Ö –º–∞—Å—Å–∞–∂–∞, –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ–∞–Ω—Å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∑–∞–ø–∏—Å—å.
–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º? ‚¨áÔ∏è'''

    if query:
        message.edit_text(text, reply_markup=reply_markup)
    else:
        message.reply_text(text, reply_markup=reply_markup)


@log_func(log)
def on_sing_up(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    keyboard = [
        [
            InlineKeyboardButton("–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", callback_data='klass'),
            InlineKeyboardButton("–õ–µ—á–µ–±–Ω—ã–π", callback_data='lech'),
            InlineKeyboardButton("–ú–µ–¥–æ–≤—ã–π", callback_data='med')
        ],
        [
            InlineKeyboardButton("–õ–∏–º—Ñ–æ–¥—Ä–µ–Ω–∞–∂–Ω—ã–π", callback_data='limfo'),
            InlineKeyboardButton("–ê–Ω—Ç–∏—Ü–µ–ª–ª—é–ª–∏—Ç–Ω—ã–π", callback_data='anti')
        ],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    query.edit_message_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –º–∞—Å—Å–∞–∂–∞: ‚¨áÔ∏è', reply_markup=reply_markup)

    return STATE_SELECT_MASSAGE


@log_func(log)
def on_massage_klassik(update: Update, context: CallbackContext):
    user_data = context.user_data
    category = '–í–∏–¥ –º–∞—Å—Å–∞–∂–∞'
    massage = '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π'
    user_data[category] = massage

    query = update.callback_query
    query.answer()

    query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É: ", reply_markup=telegramcalendar.create_calendar())

    return STATE_SELECT_DATE


@log_func(log)
def on_massage_lechebny(update: Update, context: CallbackContext):
    user_data = context.user_data
    category = '–í–∏–¥ –º–∞—Å—Å–∞–∂–∞'
    massage = '–õ–µ—á–µ–±–Ω—ã–π'
    user_data[category] = massage

    query = update.callback_query
    query.answer()

    query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É: ", reply_markup=telegramcalendar.create_calendar())

    return STATE_SELECT_DATE


@log_func(log)
def on_massage_medovy(update: Update, context: CallbackContext):
    user_data = context.user_data
    category = '–í–∏–¥ –º–∞—Å—Å–∞–∂–∞'
    massage = '–ú–µ–¥–æ–≤—ã–π'
    user_data[category] = massage

    query = update.callback_query
    query.answer()

    query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É: ", reply_markup=telegramcalendar.create_calendar())

    return STATE_SELECT_DATE


@log_func(log)
def on_massage_limfo(update: Update, context: CallbackContext):
    user_data = context.user_data
    category = '–í–∏–¥ –º–∞—Å—Å–∞–∂–∞'
    massage = '–õ–∏–º—Ñ–æ–¥—Ä–µ–Ω–∞–∂–Ω—ã–π'
    user_data[category] = massage

    query = update.callback_query
    query.answer()

    query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É: ", reply_markup=telegramcalendar.create_calendar())

    return STATE_SELECT_DATE


@log_func(log)
def on_massage_anti(update: Update, context: CallbackContext):
    user_data = context.user_data
    category = '–í–∏–¥ –º–∞—Å—Å–∞–∂–∞'
    massage = '–ê–Ω—Ç–∏—Ü–µ–ª–ª—é–ª–∏—Ç–Ω—ã–π'
    user_data[category] = massage

    query = update.callback_query
    query.answer()

    query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É: ", reply_markup=telegramcalendar.create_calendar())

    return STATE_SELECT_DATE


@log_func(log)
def on_select_date(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    bot = context.bot

    selected, date = telegramcalendar.process_calendar_selection(bot, update)
    if selected:
        user_data = context.user_data
        text = date.strftime("%d/%m/%Y")
        user_data['–î–∞—Ç–∞'] = text

        keyboard = [[
            InlineKeyboardButton("12:00", callback_data='12'),
            InlineKeyboardButton("14:30", callback_data='14'),
            InlineKeyboardButton("16:00", callback_data='16')
        ]]

        reply_markup = InlineKeyboardMarkup(keyboard)

        query.message.reply_text(text='''–í—ã –≤—ã–±—Ä–∞–ª–∏ %s
–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è: ''' % text, reply_markup=reply_markup)

        return STATE_SELECT_TIME


@log_func(log)
def on_time_12(update: Update, context: CallbackContext):
    user_data = context.user_data

    text = '12:00'
    user_data['–í—Ä–µ–º—è'] = text

    query = update.callback_query
    query.answer()

    query.edit_message_text('''–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë *–ò–º—è –∏ –§–∞–º–∏–ª–∏—é*''', parse_mode='Markdown')

    return STATE_SELECT_USER


@log_func(log)
def on_time_14(update: Update, context: CallbackContext):
    user_data = context.user_data

    text = '14:30'
    user_data['–í—Ä–µ–º—è'] = text

    query = update.callback_query
    query.answer()

    query.edit_message_text('''–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë *–ò–º—è –∏ –§–∞–º–∏–ª–∏—é*''', parse_mode='Markdown')

    return STATE_SELECT_USER


@log_func(log)
def on_time_16(update: Update, context: CallbackContext):
    user_data = context.user_data

    text = '16:00'
    user_data['–í—Ä–µ–º—è'] = text

    query = update.callback_query
    query.answer()

    query.edit_message_text('''–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë *–ò–º—è –∏ –§–∞–º–∏–ª–∏—é*''', parse_mode='Markdown')

    return STATE_SELECT_USER


@log_func(log)
def on_sing_name(update: Update, context: CallbackContext):
    user_data = context.user_data
    category = '–ò–º—è –§–∞–º–∏–ª–∏—è'
    user_name = update.effective_message.text
    user_data[category] = user_name
    print('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–º—è: ' + user_name)

    contact_keyboard = KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä', request_contact=True)
    custom_keyboard = [[contact_keyboard]]
    markup = ReplyKeyboardMarkup(custom_keyboard, resize_keyboard=True, one_time_keyboard=True)

    update.effective_message.reply_text('''*–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*''', parse_mode='Markdown', reply_markup=markup)

    return STATE_SELECT_PHONE


@log_func(log)
def on_sing_contact(update: Update, context: CallbackContext):
    message = update.effective_message
    user_data = context.user_data
    category = '–¢–µ–ª–µ—Ñ–æ–Ω'
    phone = message.text or message.contact.phone_number
    user_data[category] = phone
    print('–°–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–æ–º–µ—Ä: ' + phone)

    keyboard = [[
        InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='okay'),
        InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data='recording')
    ]]

    reply_markup = InlineKeyboardMarkup(keyboard)

    message.reply_text('''*–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!*

_–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:_ 
{}'''.format(facts_to_str(user_data)), parse_mode='Markdown', reply_markup=reply_markup)

    return STATE_FINISH


@log_func(log)
def on_finish(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    query.edit_message_text('''*–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!*

–ú–∞—Å—Ç–µ—Ä –±—É–¥–µ—Ç –æ–∂–∏–¥–∞—Ç—å –í–∞—Å.''', parse_mode='Markdown')

    return ConversationHandler.END


@log_func(log)
def on_recording(update: Update, context: CallbackContext):
    return on_sing_up(update, context)


def on_error(update, context):
    """Log Errors caused by Updates."""
    log.warning('Update "%s" caused error "%s"', update, context.error)


def main():
    updater = Updater(
        token=TOKEN,
        defaults=Defaults(run_async=True),
    )

    dp = updater.dispatcher

    dp.add_handler(CommandHandler('start', on_main_menu))

    dp.add_handler(ConversationHandler(
        entry_points=[
            CommandHandler('start', on_main_menu),
            CallbackQueryHandler(on_sing_up, pattern='sing_up')
        ],
        states={
            STATE_SELECT_MASSAGE: [
                CallbackQueryHandler(on_massage_klassik, pattern='klass'),
                CallbackQueryHandler(on_massage_lechebny, pattern='lech'),
                CallbackQueryHandler(on_massage_medovy, pattern='med'),
                CallbackQueryHandler(on_massage_limfo, pattern='limfo'),
                CallbackQueryHandler(on_massage_anti, pattern='anti'),
                CallbackQueryHandler(on_main_menu, pattern='main_menu'),
            ],

            STATE_SELECT_DATE: [
                CallbackQueryHandler(on_select_date)
            ],

            STATE_SELECT_TIME: [
                CallbackQueryHandler(on_time_12, pattern='12'),
                CallbackQueryHandler(on_time_14, pattern='14'),
                CallbackQueryHandler(on_time_16, pattern='16')
            ],

            STATE_SELECT_USER: [
                MessageHandler(Filters.text, on_sing_name)
            ],

            STATE_SELECT_PHONE: [
                MessageHandler(Filters.text | Filters.contact, on_sing_contact)
            ],

            STATE_FINISH: [
                CallbackQueryHandler(on_finish, pattern='okay'),
                CallbackQueryHandler(on_recording, pattern='recording')
            ]
        },
        fallbacks=[

        ],
        # allow_reentry=True,
        # per_message=True,
    ))

    dp.add_error_handler(on_error)

    updater.start_polling()

    updater.idle()


if __name__ == '__main__':
    main()
