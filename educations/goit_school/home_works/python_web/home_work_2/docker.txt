docker pull <IMAGE_NAME>, где <IMAGE_NAME> - имя скачиваемого образа
Зная эту команду, скачаем образ Ubuntu 18.10:
docker pull ubuntu:18.10

Теперь, для того, чтобы посмотреть список всех загруженных образов, нужно выполнить:
docker images

Для запуска контейнера существует команда:
docker run <image> <опциональная команды, которая выполнится внутри контейнера>
Давайте запустим наш первый контейнер Ubuntu:
docker run ubuntu:18.10 echo 'hello from ubuntu'
docker-run
Команда echo 'hello from ubuntu' была выполнена внутри среды Ubuntu.
Другими словами, эта команда была выполнена в контейнере ubuntu:18.10.
Теперь выполним команду для проверки списка запущенных контейнеров:
docker ps

А для того, чтобы посмотреть список всех контейнеров без
исключения, нужно добавить флаг -a, выполним:
docker ps -a

А для того, чтобы посмотреть список всех контейнеров без исключения, нужно добавить флаг -a, выполним:

docker ps -a

Выполнение неограниченное количество команда внутри контейнера
Давайте добавим немного интерактивности в наше обучение. Мы можем подключиться к консоли виртуальной ОС (Ubuntu 18.10),
и выполнять любое количество команд без завершения работы контейнера, для этого, запустим команду:

docker run -it ubuntu:18.10 /bin/bash

Опция -it вместе с /bin/bash даёт доступ к выполнению команд в терминале внутри контейнера Ubuntu.

Теперь, внутри этого контейнера можно выполнять любые команды, применимые к Ubuntu.
Вы же можете представлять это как мини виртуальную машину, условно, к консоли которой мы подключились по SSH.
В результате, теперь мы знаем возможные способы, как подключиться к контейнеру, и как выполнить команду в контейнере Docker-а.

Узнаём ID контейнера
Иногда является очень полезным узнать ID контейнера, с которым мы работаем. И как раз-таки, при выполнении команды
docker run -it <IMAGE> /bin/bash, мы окажемся в терминале, где все команды будут выполняться от имени
пользователя root@<containerid>.

Теперь, все команды буду выполняться внутри операционной системы Ubuntu. Попробуем, например, выполнить команду ls,
и посмотрим, список директорий, внутри этого образа Ubuntu.

Теперь вернёмся назад к первому окну терминала (который находится внутри контейнера), и выполним:

mkdir /truedir  #создаст папку truedir
exit #выйдет из контейнера, и вернётся в основную ОС
Выполнив команду exit, контейнер будет остановлен (чтобы убедиться, можете проверить командой docker ps).
Теперь, вы так же знаете, как выйти из Docker контейнера.

Теперь, попробуем ещё раз просмотреть список всех контейнеров, и убедимся, что новый контейнер был создан docker ps -adocker-ps--a2

Так же, для того, чтобы запустить ранее созданный контейнер, можно выполнить команду docker start <CONTAINER_ID>,

где CONTAINER_ID - id контейнера, который можно посмотреть, выполнив команду docker ps -a (и увидеть в столбце CONTAINER_ID)

В моём случае, CONTAINER_ID последнего контейнера = 7579c85c8b7e (у вас же, он будет отличаться)

Запустим контейнер командой:

docker start 7579c85c8b7e    #ваш CONTAINER_ID
docker ps
docker exec -it 7579c85c8b7e /bin/bash  #ваш CONTAINER_ID
И теперь, если внутри контейнера выполнить команду ls, то можно увидеть, что ранее созданная папка
truedir существует в этом контейнере

Команда exec позволяет выполнить команду внутри запущенного контейнера. В нашем случае, мы выполнили /bin/bash,
что позволило нам подключиться к терминалу внутри контейнера.

Для выхода, как обычно, выполним exit.

Теперь остановим и удалим Docker контейнеры командами:
docker stop <CONTAINER_ID>
docker rm <CONTAINER_ID>

docker ps a   # просмотрим список активных контейнеров
docker stop aa1463167766   # остановим активный контейнер
docker rm aa1463167766     # удалим контейнер
docker rm bb597feb7fbe     # удалим второй контейнер

В основном, нам не нужно, чтобы в системе плодилось большое количество контейнеров. Потому, команду docker run
очень часто запускают с дополнительным флагом --rm, который удаляет запущенный контейнер после работы:

docker run -it --rm ubuntu:18.10 /bin/bash

Для создания образа из Dockerfile нужно выполнить:
docker build <DOCKERFILE_PATH> --tag <IMAGE_NAME>
<DOCKERFILE_PATH> - путь к файлу Dockerfile (. - текущая директория),
<IMAGE_NAME> - имя, под которым образ будет создан

Выполним:

docker build . --tag pyramid
При том, что имя файла Dockerfile при указывании пути упускается, нужно указывать только директорию,
в которой этот файл находится (а . означает, что файл находится в той директории, из которой была запущена консоль)